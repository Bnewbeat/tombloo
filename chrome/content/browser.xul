<?xml version="1.0"?>
<overlay xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<popup id="contentAreaContextMenu">
		<menuitem 
			class="menuitem-iconic"
			insertbefore="context-bookmarklink" 
			label="Share" 
			id="tombloo-menu-share" 
			accesskey="J"/>
		<menu 
			class="menu-iconic"
			image="chrome://tombloo/skin/empty.png"
			insertbefore="context-bookmarklink"
			label="Share...">
			<menupopup id="tombloo-menu-select"/>
		</menu>
		<menuseparator insertbefore="context-bookmarklink" />
	</popup>
	<menupopup id="menu_ToolsPopup">
		<menu label="Tombloo" insertbefore="sanitizeSeparator">
			<menupopup id="tombloo-menu-main"/>
		</menu>
	</menupopup>
	<script type="text/javascript; version=1.7"><![CDATA[
	(function(){
		var env = Cc['@brasil.to/tombloo-service;1'].getService().wrappedJSObject;
		env.signal(env, 'browser-open', window);
		
		// ショートカットキーの設定
		window.addEventListener('keydown', function(e){
			var key = env.shortcutkeys[env.keyString(e)];
			if(!key)
				return;
			
			key.execute(e);
		}, true);
		
		window.addEventListener('load', function(e){
			env.signal(env, 'browser-load', e);
			
			var context;
			var menuContext = document.getElementById('contentAreaContextMenu');
			var menuShare = document.getElementById('tombloo-menu-share');
			var menuSelect = document.getElementById('tombloo-menu-select');
			
			menuShare.setAttribute('accesskey', env.getPref('accesskey.share'));
			
			// Menu Editor拡張によって個別メニューのイベントを取得できなくなる現象を回避
			menuContext.addEventListener('popupshowing', function(e){
				if(e.eventPhase != Event.AT_TARGET || (context && context.target == gContextMenu.target))
					return;
				
				var doc = gContextMenu.target.ownerDocument;
				var win = doc.defaultView.wrappedJSObject;
				try{
					// about:config などで無効にする
					win.location.host;
					
					menuShare.disabled = false;
					menuSelect.parentNode.disabled = false;
				}catch(e){
					menuShare.disabled = true;
					menuSelect.parentNode.disabled = true;
					
					return;
				}
				
				// command時にはクリック箇所などの情報が失われるためコンテキストを保持しておく
				context = env.update({
					document  : doc,
					window    : win,
					title     : ''+doc.title || '',
					selection : ''+win.getSelection(),
					event     : e,
					mouse     : {
						x : e.pageX,
						y : e.pageY,
					},
					menu      : gContextMenu,
				}, gContextMenu, win.location);
				
				var exts = env.Tombloo.Service.check(context);
				menuShare.label = 'Share - ' + exts[0].name;
				menuShare.extracter = exts[0].name;
				menuShare.setAttribute('image', exts[0].ICON || 'chrome://tombloo/skin/empty.png');
				
				if(exts.length<=1){
					menuSelect.parentNode.disabled = true;
				} else {
					menuSelect.parentNode.disabled = false;
					
					for(var i=0 ; i<exts.length ; i++){
						var ext = exts[i];
						var item = appendMenuItem(menuSelect, ext.name, ext.ICON || 'chrome://tombloo/skin/empty.png');
						item.extracter = ext.name;
						item.showForm = true;
					}
				}
			}, true);
			
			menuContext.addEventListener('popuphidden', function(e){
				if(e.eventPhase != Event.AT_TARGET)
					return;
				
				context = null;
				
				env.clearChildren(menuSelect);
			}, true);
			
			menuContext.addEventListener('command', function(e){
				if(!e.target.extracter)
					return;
				
				context.event = e;
				
				var svc = env.Tombloo.Service;
				svc.share(context, svc.extracters[e.target.extracter], e.target.showForm);
			}, true);
			
			
			var menuAction = document.getElementById('tombloo-menu-main');
			env.Tombloo.Service.actions.names.forEach(function(name){
					appendMenuItem(menuAction, name);
			});
			
			menuAction.addEventListener('command', function(e){
				env.Tombloo.Service.actions[e.originalTarget.label].execute();
			}, true);
		}, false);
		
		
		// ----[Utility]--------------------------------------------
		function appendMenuItem(menu, label, image){
			if((/^----/).test(label))
				return menu.appendChild(document.createElement('menuseparator'));
			
			var item = menu.appendChild(document.createElement('menuitem'));
			item.setAttribute('label', label);
			
			if(image){
				item.setAttribute('class', 'menuitem-iconic');
				item.setAttribute('image', image);
			}
			
			return item;
		}
	})();
	]]></script>
</overlay>
