<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css" ?>
<?xml-stylesheet href="chrome://tombloo/content/prefs.css" type="text/css" ?>

<!DOCTYPE prefwindow SYSTEM "chrome://tombloo/locale/tombloo.dtd" >

<prefwindow 
	style="width: 50em;" 
	xmlns:html="http://www.w3.org/1999/xhtml" 
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" 
	title="&label.tomblooOptions;" >
	
	<hbox flex="1" pack="end">
		<resizer dir="bottomright" style="cursor: se-resize;" />
	</hbox>
	
	<prefpane flex="1" id="main">
		<preferences>
			<preference 
				id="trimReblogInfo" 
				name="extensions.tombloo.trimReblogInfo" 
				type="bool"/>
			<preference 
				id="amazonAffiliateId" 
				name="extensions.tombloo.amazonAffiliateId" 
				type="string"/>
			<preference 
				id="thumbnailTemplate" 
				name="extensions.tombloo.thumbnailTemplate" 
				type="string"/>
			<preference 
				id="ignoreError" 
				name="extensions.tombloo.ignoreError" 
				type="string"/>
			<preference 
				id="accesskey.share" 
				name="extensions.tombloo.accesskey.share" 
				type="string"/>
			<preference 
				id="shortcutkey.quickPost.link" 
				name="extensions.tombloo.shortcutkey.quickPost.link" 
				type="string"/>
			<preference 
				id="shortcutkey.quickPost.regular" 
				name="extensions.tombloo.shortcutkey.quickPost.regular" 
				type="string"/>
			<preference 
				id="shortcutkey.checkAndPost" 
				name="extensions.tombloo.shortcutkey.checkAndPost" 
				type="string"/>
			<preference 
				id="tagProvider" 
				name="extensions.tombloo.tagProvider" 
				type="string"/>
			<preference 
				id="tagAutoComplete" 
				name="extensions.tombloo.tagAutoComplete" 
				type="bool"/>
			<preference 
				id="dataDir" 
				name="extensions.tombloo.dataDir" 
				type="string"/>
		</preferences>
		
		<tabbox flex="1">
			<tabs>
				<tab label="&label.postConfig;"/>
				<tab label="&label.post;"/>
				<tab label="&label.entry;"/>
			</tabs>
			<tabpanels flex="1">
				<tabpanel>
					<tree id="posters" hidecolumnpicker="true" seltype="single" >
						<treecols>
							<treecol flex="1"/>
							<treecol type="checkbox" style="width:4em" label="Text" />
							<treecol type="checkbox" style="width:4em" label="Photo" />
							<treecol type="checkbox" style="width:4em" label="Quote" />
							<treecol type="checkbox" style="width:4em" label="Link" />
							<treecol type="checkbox" style="width:4em" label="Video" />
							<treecol type="checkbox" style="width:4em" label="Chat" />
							<treecol type="checkbox" style="width:5.5em" label="Reblog" />
						</treecols>
					</tree>
				</tabpanel>
				<tabpanel>
					<grid flex="1">
						<columns>
							<column pack="end" align="end"/>
							<column flex="1"/>
						</columns>
						<rows>
							<row align="center">
								<label value="&label.accesskey.share;"/>
								<hbox>
									<textbox preference="accesskey.share" maxlength="1" size="3" />
								</hbox>
							</row>
							<separator class="groove-thin" width="1" style="margin: 0.6em 0 1.5em 0;" />
							<row align="center">
								<label value="&label.shortcutkey.quickPost.regular;" />
								<hbox>
									<textbox preference="shortcutkey.quickPost.regular" size="35"/>
								</hbox>
							</row>
							<row align="center">
								<label value="&label.shortcutkey.quickPost.link;" />
								<hbox>
									<textbox preference="shortcutkey.quickPost.link" size="35"/>
								</hbox>
							</row>
							<row align="center">
								<label value="&label.shortcutkey.checkAndPost;" />
								<hbox>
									<textbox preference="shortcutkey.checkAndPost" size="35"/>
								</hbox>
							</row>
							<row align="center" style="margin-top: 0.6em;">
								<label value="&label.tagProvider;" />
								<radiogroup preference="tagProvider" />
							</row>
							<row align="center" style="margin: 0.4em 0 0.5em 0;">
								<label value="&label.tagAutoComplete;" />
								<checkbox preference="tagAutoComplete" />
							</row>
							<separator class="groove-thin" width="1" style="margin: 0.6em 0 1.5em 0;" />
							<row align="center">
								<label value="&label.ignoreError;"/>
								<textbox preference="ignoreError" />
							</row>
							<row align="center" style="margin-top: -0.3em;">
								<spacer />
								<textbox readonly="true" value="&label.example; (ffffound: (?!auth)|already)" />
							</row>
						</rows>
					</grid>
				</tabpanel>
				<tabpanel>
					<grid flex="1">
						<columns>
							<column pack="end" align="end" orient="horizontal"/>
							<column flex="1"/>
						</columns>
						<rows>
							<row align="center">
								<label value="&label.amazonAffiliateId;"/>
								<hbox>
									<textbox preference="amazonAffiliateId" size="35" />
								</hbox>
							</row>
							<row align="center">
								<label value="&label.thumbnailTemplate;"/>
								<textbox preference="thumbnailTemplate" />
							</row>
							<row align="center" style="margin-top: -0.3em;">
								<spacer />
								<textbox readonly="true" value="&label.example; &lt;img src=&quot;http://mozshot.nemui.org/shot?{url}&quot; /&gt;" />
							</row>
							<row align="center">
								<label value="&label.trimReblogInfo;"/>
								<checkbox preference="trimReblogInfo" />
							</row>
							<separator class="groove-thin" width="1" style="margin: 1em 0 1em 0;" />
							<row align="center">
								<label value="&label.dataDir;"/>
								<hbox>
									<textbox preference="dataDir" flex="1"/><button label="&label.browse;"/>
								</hbox>
							</row>
							<row align="center" style="margin-top: -0.3em;">
								<spacer />
								<textbox readonly="true" value="&label.example; {ProfD}/tombloo" />
							</row>
						</rows>
					</grid>
				</tabpanel>
			</tabpanels>
		</tabbox>
		
		<script><![CDATA[
		// chrome://tombloo/content/prefs.xul
		var env = Components.classes['@brasil.to/tombloo-service;1'].getService().wrappedJSObject;
		env.extend(this, env, false);
		
		var prefpane = document.getElementsByTagName('prefpane')[0];
		function getField(name){
			return document.getElementsByAttribute('preference', name)[0];
		}
		
		function keyStringField(name, meta){
			var elm = getField(name);
			elm.addEventListener('keydown', function(e){
				var key = keyString(e);
				switch(key) {
				case 'TAB':
				case 'SHIFT + TAB':
					return;
					
				}
				
				cancel(e);
				elm.value = (key=='ESCAPE')? '' : 
					(meta)? key : key.split(' + ').pop();
				prefpane.userChangedValue(elm);
			}, true);
		}
		
		function mouseStringField(name){
			var elm = getField(name);
			observeMouseShortcut(elm, function(e, key){
				elm.value = key;
				prefpane.userChangedValue(elm);
				
				// 全てのキーを処理しなかったことにしてイベントが停止するのを避ける
				return true;
			});
			elm.addEventListener('keydown', function(e){
				switch(keyString(e)) {
				case 'TAB':
				case 'SHIFT + TAB':
					return;
					
				case 'ESCAPE':
					elm.value = '';
					prefpane.userChangedValue(elm);
				}
				
				cancel(e);
			}, false);
			elm.addEventListener('contextmenu', cancel, true);
		}
		
		mouseStringField('shortcutkey.checkAndPost');
		keyStringField('shortcutkey.quickPost.link', true);
		keyStringField('shortcutkey.quickPost.regular', true);
		keyStringField('accesskey.share', false);
		
		
		var tagProvider = document.getElementsByAttribute('preference', 'tagProvider')[0];
		for(var name in models)
			if(models[name].getUserTags)
				tagProvider.appendItem(name, name).setAttribute('src', models[name].ICON);
		window.addEventListener('load', function(){
			// スクリプト実行時点でprefpaneのコンストラクターからvalueが先に与えられているため、
			// 後から追加したradioのチェックをつけることはできない。
			// またロード中はradiogroup._getRadioChildrenに反映されていないため、
			// valueの変更でチェックをつけることもできない。
			tagProvider.value = tagProvider.value;
		}, true)
		
		
		var elmPosters = document.getElementById('posters');
		elmPosters.table = [];
		elmPosters.getTargetCell = function(e){
			var row={}, col={}, obj={};
			this.treeBoxObject.getCellAt(e.clientX, e.clientY, row, col, obj);
			
			if(!col.value)
				return;
			
			return this.table[row.value][col.value.index];
		}
		elmPosters.changeCursor = function(cursor){
			if(this.style.cursor == cursor)
				return;
			
			this.style.cursor = cursor;
			this.treeBoxObject.clearStyleAndImageCaches();
		}
		
		var config = eval(getPref('postConfig'));
		withDocument(document, function(){
			var elmChildren = elmPosters.appendChild(TREECHILDREN());
			
			values(models).forEach(function(model){
				// インターフェースが実装されているポスト対象のサービスでない場合は処理しない
				if(!model.check)
					return;
				
				var conf = config[model.name] || {};
				var row = [null];
				var elmRow = TREEROW(TREECELL({
					label    : model.name, 
					src      : model.ICON,
				}));
				
				'regular photo quote link video conversation favorite'.split(' ').forEach(function(type){
					var postable = (type=='favorite')? !!model.favor : model.check({
						type : type,
						pageUrl : {
							match: function(){return true}
						},
					});
					
					// type
					var elmCell = elmRow.appendChild(TREECELL({
						properties : conf[type] || (postable && 'enabled'),
					}));
					update(elmCell, {
						type     : type, 
						name     : model.name, 
					});
					row.push(postable? elmCell : null);
				});
				
				elmChildren.appendChild(TREEITEM(elmRow));
				elmPosters.table.push(row);
			});
		});
		
		var source;
		var elmDowned;
		elmPosters.addEventListener('click', function(e){
			// ドラッグ後のマウスアップではないか?
			var elmCell = elmPosters.getTargetCell(e);
			if(!elmCell || elmDowned != elmCell)
				return;
			
			var val = elmCell.getAttribute('properties');
			val = 
				(val=='default')? 'enabled' : 
				(val=='enabled')? 'disabled' : 'default'
			elmCell.setAttribute('properties', val);
		}, true);
		
		elmPosters.addEventListener('mousemove', function(e){
			var elmCell = elmPosters.getTargetCell(e);
			if(!source){
				elmPosters.changeCursor(elmCell? 'pointer' : '');
			} else {
				elmPosters.changeCursor('url(chrome://tombloo/skin/' + source + '.png), pointer');
				elmCell && elmCell.setAttribute('properties', source);
			}
		}, true);
		
		elmPosters.addEventListener('mousedown', function(e){
			var elmCell = elmPosters.getTargetCell(e);
			if(!elmCell)
				return;
			
			source = elmCell.getAttribute('properties');
			elmDowned = elmCell;
		}, true);
		
		elmPosters.addEventListener('mouseup', function(e){
			source = null;
			elmPosters.changeCursor(elmPosters.getTargetCell(e)? 'pointer' : '')
		}, true);
		
		elmPosters.addEventListener('mouseout', function(e){
			source = null;
		}, false);
		
		
		var elmDataDir = getField('dataDir');
		elmDataDir.nextSibling.addEventListener('command', function(){
			var fp = new FilePicker(window, getMessage('label.dataDir'), FilePicker.modeGetFolder);
			fp.displayDirectory = getDataDir();
			if(fp.show() == fp.returnOK){
				elmDataDir.value = fp.file.path.replace(getProfileDir().path, '{ProfD}');
				prefpane.userChangedValue(elmDataDir);
			}
		}, true)
		
		
		// MacではOK/キャンセルが表示されないため無条件にunloadで保存する
		window.addEventListener(AppInfo.OS.indexOf('WIN') == 0? 'beforeaccept' : 'unload', function(e){
			var configs = {};
			for each(var row in elmPosters.table){
				for each(var elmCell in row){
					if(!elmCell)
						continue;
					
					var name = elmCell.name;
					if(!configs[name])
						configs[name] = {};
					configs[name][elmCell.type] = elmCell.getAttribute('properties');
				}
			}
			
			setPref('postConfig', uneval(configs));
		}, true);
		
		// beforeaccept時点ではpreferenceが更新されていないためunloadを使う
		window.addEventListener('unload', function(e){
			// ショートカットキーの変更を反映させる
			reload();
		}, true);
		
		]]></script>
	</prefpane>
</prefwindow>
